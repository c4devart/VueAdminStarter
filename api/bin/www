#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const http = require('http')
const { debug } = require('../services/logger')
const { connect } = require('../services/mongo-client')

const port = process.env.PORT || 3000

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Connect to MongoDB
 */
connect(null, (err) => {
  if (err) throw err

  // Listen on provided port, on all network interfaces.
  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)
})

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port

  debug('api:server', `Listening on ${bind}`)
}
